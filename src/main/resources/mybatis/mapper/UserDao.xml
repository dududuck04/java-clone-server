<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="com.mzc.stc.caa.carrot.user.dao.UserDao">

	<!-- 유저 인덱스 및 상태정보를 이용해 사용자 탈퇴 여부 확인조회 -->
	<select id="checkDeleteUser" parameterType="int" resultType="boolean">
		SELECT count(*) 
		FROM User 
		WHERE userIdx = #{userIdx} and status = 0;
	</select>
	
		<!-- 차단 해제하려는 pk값이 차단된 상태인지 확인조회 -->
	<select id="checkBlcokUser" parameterType="blockDto" resultType="boolean">
		SELECT count(*)
		FROM User join UserBlock B on User.userIdx = B.userIdx
		WHERE (User.userIdx = #{userIdx} and
			  B.targetIdx = (SELECT UserBlock.targetIdx
			  			   FROM User
			  			   JOIN UserBlock on User.userIdx = UserBlock.targetIdx
			  			   WHERE User.userIdx = #{targetIdx} and User.status = 1
			  			   limit 1)
			  			   and B.status = 1)
	</select>
	
		<!-- 이미 신고된 유저인지 확인조회 -->
	<select id="checkReportStatus" parameterType="UserReportDto" resultType="boolean">
		SELECT count(*) 
		FROM UserReport 
		WHERE userIdx = #{userIdx} and reportTargetIdx = #{reportTargetIdx} and type = #{type} 
	</select>
	
	<!-- 유저 전화번호 및 상태정보를 이용해 회원 가입 여부 확인조회 -->
	<select id="checkPhoneNumber" parameterType="string" resultType="boolean">
		SELECT count(*) 
		FROM User 
		WHERE phoneNumber = #{phoneNumber} and status = 1;
	</select>
	
	<!-- 유저 임시 인증 테이블에서 존재하는 전화번호인지 확인조회 -->
	<select id="checkTempPhoneNumber" parameterType="string" resultType="boolean">
		SELECT count(*) 
		FROM UserTempAuthCode 
		WHERE phoneNumber = #{phoneNumber} and status = 1;
	</select>
	
	<!-- 인증번호 사용여부 조회 -->
	<select id="checkAuthCodeStatus" parameterType="int" resultType="boolean">
		SELECT count(*) 
		FROM UserTempAuthCode 
		WHERE tempAuthCodeIdx = #{tempAuthCodeIdx} and status = 1;
	</select>
	
	<!-- 올바른 인증코드인지 검증하는 메소드 -->
	<select id="checkAuthCode" parameterType="TempAuthCodeDto" resultType="boolean">
		SELECT count(*) 
		FROM UserTempAuthCode 
		WHERE authCode = #{authCode} and tempAuthCodeIdx = #{tempAuthCodeIdx} and status = 1;
	</select>
	
	<!-- 닉네임 중복여부 확인조회 -->
	<select id="checkNickName" parameterType="String" resultType="boolean">
		SELECT count(*) 
		FROM User 
		WHERE nickName = #{nickName} and status = 1;
	</select>
	
		<!-- 사번을 통한 사용자 정보 조회  -->  
    <update id="deleteAuthCode" parameterType="int">
    	UPDATE UserTempAuthCode
    	SET status = 0 
    	WHERE tempAuthCodeIdx = #{tempAuthCodeIdx}
	</update>
	
	<!-- 전화번호를 통한 사용자 회원가입  -->  
    <insert id="createUser" parameterType= "Map" useGeneratedKeys = "true" >
        <selectKey keyProperty="userIdx" resultType="int" order = "AFTER">  
        	SELECT LAST_INSERT_ID() as userIdx
     	</selectKey>
    	INSERT INTO User (nickName, phoneNumber) 
    		   VALUES (#{nickName},#{phoneNumber})
	</insert>

	
	<!-- 회원가입시 유저 인덱스 값을 이용한 지역 설정  -->  
    <insert id="createRegion" parameterType= "int" >
		INSERT INTO UserRegion (userIdx) 
			   VALUES (#{userIdx})
	</insert>
	
		<!-- 사번을 통한 사용자 정보 조회  -->  
    <update id="deleteUser" parameterType="int">
    	UPDATE User 
    	SET status = 0 
    	WHERE userIdx = #{userIdx}
	</update>
    
    	<!-- 유저 전화번호 및 상태정보를 이용해 회원 가입 여부 확인조회 -->
	<select id="getUserIdxByPhoneNumber" parameterType="string" resultType="int">
		SELECT userIdx 
		FROM User 
		WHERE phoneNumber = #{phoneNumber} and status = 1;

	</select>
	
	   <!-- 유저 전화번호 및 상태정보를 이용해 회원 가입 여부 확인조회 -->
	<select id="getUserIdxByAuthCode" parameterType="string" resultType="boolean">
		SELECT userIdx 
		FROM User 
		WHERE authCode = #{authCode} and status = 1;

	</select>
	
	
		<!-- 유저에게 보낸 인증코드 임시 저장  -->  
    <insert id="saveAuthCode" parameterType= "Map" useGeneratedKeys = "true" >
        <selectKey keyProperty="tempAuthCodeIdx" resultType="int" order = "AFTER">  
        	SELECT LAST_INSERT_ID() as tempAuthCodeIdx
     	</selectKey>
    	INSERT INTO UserTempAuthCode (authCode, phoneNumber)
    		   VALUES (#{authCode}, #{phoneNumber})
	</insert>

	
		   <!-- 임시 인증코드 pk 값을 이용해 유저의 전화번호 리턴 -->
	<select id="getPhoneNumberByTempIdx" parameterType="int" resultType="String">
		SELECT phoneNumber
		FROM UserTempAuthCode 
		WHERE tempAuthCodeIdx = #{tempAuthCodeIdx} and status = 1;
	</select>
	
	<!-- 임시 인증코드 pk 값을 이용해 유저의 전화번호 리턴 -->
	<select id="getUserIdxByNickName" parameterType="Map" resultType="Integer">
		SELECT userIdx as targetIdx
		FROM User 
		WHERE nickName = #{nickName} and status = 1;
	</select>
	
	<!-- 임시 인증코드 pk 값을 이용해 유저의 전화번호 리턴 -->
	<select id="getUserIdxByNickName2" parameterType="UserReportDto" resultType="Integer">
		SELECT userIdx as targetIdx
		FROM User 
		WHERE nickName = #{nickName} and status = 1;
	</select>
	
	
	<!-- 유저 프로필 정보 리턴 -->
	<select id="getMyProfile" parameterType="Map" resultType="Map">
		SELECT image, nickName, mannerTemp, tradeRate, responseRate, User.createAt,
	   		   CASE R.nowStatus WHEN 1
		                THEN R.regionName
	                    WHEN 0
	                    THEN R.regionName
	                        END as regionName,
	   		   R.authStatus, R.authCount,
	   		   R.nowStatus 
		FROM User join UserRegion R on User.userIdx = R.userIdx
		WHERE User.userIdx = #{userIdx} and User.status = 1
		ORDER BY  R.nowStatus DESC
		limit 1
	</select>
	
	<!-- 유저 이미지 변경 -->
    <update id="modifyImage" parameterType="UserDto">
    	UPDATE User 
    	SET image = #{image}
    	WHERE userIdx = #{userIdx}
	</update>
	
		<!-- 유저 이미지 변경 -->
    <update id="modifyNickName" parameterType="UserDto">
    	UPDATE User 
    	SET nickName = #{nickName}
    	WHERE userIdx = #{userIdx}
	</update>
	
	<!-- 차단 하려는 pk 값을 이용해 차단한 유저인지 확인조회 -->
	<select id="checkCountBlockUser" parameterType="Map" resultType="boolean">
		SELECT count(*)
		FROM User join UserBlock B on User.userIdx = B.userIdx
		WHERE (User.userIdx = #{userIdx} and
			  B.targetIdx = (SELECT UserBlock.targetIdx
			  			   FROM User
			  			   JOIN UserBlock on User.userIdx = UserBlock.targetIdx
			  			   WHERE User.userIdx = #{targetIdx} and User.status = 1
			  			   limit 1)
			  			   and User.status = 1) and B.status = 1
	</select>
	
	<!-- 차단 해제하려는 pk값이 차단된 상태인지 확인조회 -->
		<select id="checkBlockStatus" parameterType="Map" resultType="boolean">
		SELECT count(*)
		FROM User join UserBlock B on User.userIdx = B.userIdx
		WHERE (User.userIdx = #{userIdx} and
			  B.targetIdx = (SELECT UserBlock.targetIdx
			  			   FROM User
			  			   JOIN UserBlock on User.userIdx = UserBlock.targetIdx
			  			   WHERE User.userIdx = #{targetIdx} and User.status = 1
			  			   limit 1)
			  			   and B.status = 0)
	</select>
	
	
		<!-- 유저 차단 -->
    <insert id="blockUser" parameterType= "Map" >
		INSERT INTO UserBlock (userIdx, targetIdx) 
			   VALUES (#{userIdx}, #{targetIdx})
	</insert>
	
			<!-- 유저 차단 -->
    <insert id="blockAgainUser" parameterType= "Map" >
		UPDATE UserBlock 
		SET status = 1 
		WHERE userIdx = #{userIdx} and targetIdx = #{targetIdx}
	</insert>
	
	
	
	<!-- 사용자가 차단한 다른 유저들 정보 리턴 -->
	<select id="getBlockUser" parameterType="int" resultType="Map">
		SELECT User.nickName
		FROM UserBlock join User on UserBlock.targetIdx = User.userIdx
		WHERE UserBlock.userIdx = #{userIdx} and UserBlock.status = 1;
	</select>
	
	<!-- 유저 차단 해제 -->
	<update id="blockCancel" parameterType="Map">
    	UPDATE UserBlock 
    	SET status = 0
    	WHERE userIdx = #{userIdx} and targetIdx = #{targetIdx}
	</update>


		<!-- 유저 전화번호 및 상태정보를 이용해 회원 가입 여부 확인조회 -->
	<select id="checkReportUser" parameterType="UserReportDto" resultType="int">
		SELECT count(type)
		FROM UserReport
		WHERE userIdx = #{userIdx} and reportTargetIdx = #{ReportTargetIdx}
		GROUP BY type
	</select>
	
		<!-- 유저에게 보낸 인증코드 임시 저장  -->  
    <insert id="reportUser" parameterType= "UserReportDto" >
    	INSERT INTO UserReport (userIdx, reportTargetIdx, content, type)
    		   VALUES (#{userIdx}, #{reportTargetIdx}, #{content}, #{type})
	</insert>
	
	
</mapper>